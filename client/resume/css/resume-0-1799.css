.skill-wave,
.skill-progress {
  display: none;
}
.resume-page {
  padding-bottom: 50px;
}
.header,
.main {
}

.section {
  max-width: 960px;
  margin: 30px auto;
}
.section--info {
  font-size: 16px;
  line-height: 2;
  padding: 0 20px;
}

/* 技术栈 */
.skill-graph .skill-wrap {
  position: relative;
  color: rgba(255, 255, 255, .7);
  overflow: hidden;
}
.skill-graph .skill-wrap::after {
  content: '';
  position: absolute;
  top: 37%;
  left: 33.5%;
  display: inline-block;
  width: 56px;
  height: 10px;
  background: linear-gradient(to right, transparent 0%, grey 15%, #000 25%, #35363c 35%, #2b282a 65%, #000 75%, grey 85%, transparent 0%);
}
.skill-desc-block {
  position: relative;
  width: 300px;
  height: 400px;
  padding: 20px;
  margin: 0 30px;
}
.skill-graph-block::before,
.skill-desc-block::after {
  content: '';
  position: absolute;
  top: 41%;
  display: inline-block;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: #2eac6d;
  box-shadow: inset 0 -3px 3px 0 rgba(0, 0, 0, .4), inset -3px 0 3px 0 rgba(0, 0, 0, .4);
}
.skill-desc-block::after {
  right: 7px;
}
.skill-graph-block::before {
  left: 7px;
}
.skill-desc-item {
  line-height: 2;
  overflow: hidden;
}
.skill-desc-list .desc-name {
  font-size: 16px;
}
.skill-desc-list .desc-detail {
  float: right;
  font-size: 12px;
  color: #aaa;
  text-align: right;
  margin-left: 50px;
}
.skill-desc-list .desc-level,
.desc-progress-bar {
  display: none;
}
.skill-graph-block {
  position: relative;
  width: 550px;
  height: 400px;
  font-size: 12px;
  padding: 0 50px 0;
  margin: 0 30px 50px 0;
  background: repeating-linear-gradient(to top, transparent 0%, transparent 15%, #4b5160 15%, #4b5160 16%);
  background-clip: content-box;
}
.skill-y-item {
  position: absolute;
  left: 10px;
}
.skill-graph-list {
  display: flex;
  text-align: center;
  height: 100%;
  padding-top: 18px;
  padding-bottom: 64px;
}
.skill-graph-item {
  flex: 20%;
  position: relative;
}

/*
// === 浏览器渲染: === //
// === 1 特点：=== //
// === 1.1 HTML和CSS是边加载边解析边渲染, 比如50kb的HTML, 是下载到8kb时会解析渲染，再到下一个8kb时同样, 此过程DOM Tree和Render Tree是动态更新的 === //
// === 1.2 遇到script脚本会发生JS阻塞, 因为JS有能力改变DOM结构, 因此要把js脚本放在底部 === //
// === 2 流程: === //
                       DOM  <-- JS
                        |       ^
                        |      /
                        v     /
HTML ----> 解析 ----> DOM Tree
                        |               Layout
                        |                 |
                        v                 v
                    Attachment ----> Render Tree ----> Painting ----> Display
                        ^
                        |
                        |
CSS ----> 解析 ----> 样式规则
// === 3 DOM Tree和Render Tree: 除了以下情况两者都会一一对应 === //
// === 3.1 可显示的元素: 当把一个元素display: none;之后，在DOM Tree中可见但是在Render Tree中并不可见，所以若要通过js对dom进行一些操作，可以先把该dom隐藏，这样的话就可以减少了对Render Tree的影响 === //
// === 3.2 定位元素：当一个元素定位后，会脱离正常文档流而跑去其它地方，所以在DOM Tree中没有消失，在Render Tree中也只是一个占位符，那么一些复杂的动画，就可以用它来减少对Render Tree的负担 === //

// === 1 重排: 当几何属性改变时会触发重排 === //
// === 1.1 场景: === //
// === > 页面第一次渲染 === //
// === > 浏览器窗口尺寸改变 === //
// === > 元素位置和尺寸改变 === //
// === > 新增和删除可见元素 === //
// === > 内容改变 === //
// === 2 重绘: 影响元素外观的属性改变时触发 === //
// === 2.1 场景: === //
// === > color, background-color等 === //
// === 3 关系: 重排必导致重绘，重绘不一定导致重排 === //
// === 4 新建DOM的过程: === //
// === 4.1 获取DOM后分割成多个图层 === //
// === 4.2 对每个图层的节点计算样式结果(Recaculate style - 样式重计算) === //
// === 4.3 为每个节点生成图形和位置(Layout - 重排) === //
// === 4.4 将每个节点绘制填充到图层位图中(Paint Setup 和 Paint - 重绘) === //
// === 4.5 图层作为纹理上传至GPU === //
// === 4.6 组合多个图层到页面上生成最终屏幕对象(Composite Layers - 图层重组) === //

// === 动画优化： === //
// === 1 css动画渲染途径: === //
// === 1.1 layout -> paint -> composite === //
// === 1.2 paint -> composite === //
// === 1.3 composite === //
// === 2 composite类：transform, opacity === //
// === 3 优化方式： === //
// === 3.1 减少不必要的动画元素 === //
// === 3.2 尽量使用 fixed、absolute 定位以减少对其它元素影响 === //
// === 3.3 尽量只改变transform和opacity === //
// === 3.4 恰当开启GPU硬件加速效果, 在不需要时去掉(transform: translate3d(0, 0, 0)、will-change: transform) === //
// === 3.5 尽量通过class而非一条条地修改样式 === //
// === 3.6 批量操作DOM时先display: none然后进行操作再显示出来 === //
// === 3.7 不要把DOM节点的属性值(比如offsetHeight/offsetWidth会实时刷新)放在循环里当做变量而是在循环外声明 === //
// === 3.8 不要使用table布局, 因为有可能小的改动会使得整个table重新布局(改用div) === //
// === 3.9 适当地新建图层: 将重绘, 回流的影响范围限制在单独的图层内(针对于频繁重排重绘的DOM元素), 但尽量少用，因为新建图层在Composite过程运算量会很大, 而且一定要在用的前后进行对比，确实有性能提升了才用图层 === //
// === 3.9.a 比如<video> / <canvas> / will-change / trnasform / opacity 这些都会在chrome中新建图层 === //
// === 3.10 动画实现的速度的选择(避免频繁地重排重绘) === //

// === 性能工具分析: === //
// === 1 Performance面板: 渲染分析 === //
// === 1.1 record 可记录某一段时间内渲染情况 === //
// === 2 Layers面板: 可查看图层 === //
// === 3 Rendering面板: === //
// === 3.1 Paint Flashing: 重绘的元素会被绿色标记 === //
*/


.skill-graph-list .item-graph,
.skill-graph-list .item-name {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
.skill-graph-list .item-graph {
  bottom: 0;
  width: 40px;
  height: 100%;
  background: linear-gradient(to right, #ff4500 0%, #ff4500 47%, #cf3a02 50%, #cf3a02 100%);
  transform-origin: 100% 100%;
  margin-left: -20px;
  animation: graphAnim .5s ease-out;
}
.skill-graph-list .item-name {
  bottom: -20px;
  width: 100px;
}
@keyframes graphAnim {
  0% {
    transform: scaleY(0);
  }
}
/* 项目经理 */
.project-list {
  margin-left: 160px;
  word-break: break-all;
}
.project-item {
  padding: 15px;
}